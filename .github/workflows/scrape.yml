name: "練習棟予約システム スクレイピング"

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch: {}

jobs:
  scrape:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Find previous successful run
        id: prev_run
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflow_id = 'scrape.yml';
            const perPage = 10;
            let page = 1;
            let found = null;

            while (true) {
              const { data } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                status: 'completed',
                per_page: perPage,
                page,
              });

              const runs = data.workflow_runs;
              if (runs.length === 0) {
                break;
              }

              const candidate = runs
                .filter(r => r.id < context.runId && r.conclusion === 'success')
                .sort((a, b) => b.id - a.id)[0];

              if (candidate) {
                found = candidate;
                break;
              }

              page++;
            }

            if (found) {
              core.setOutput('run-id', found.id);
            } else {
              core.setFailed(`過去の実行（${perPage} 件ずつ取得）を全て調べましたが前回成功 run が見つかりませんでした`);
            }
      - name: Download previous state artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: state
          path: .
          run-id: ${{ steps.prev_run.outputs.run-id }}
        continue-on-error: true
      - name: Decrypt artifact
        env:
          ARTIFACT_PASSPHRASE: ${{ secrets.ARTIFACT_PASSPHRASE }}
        run: |
          if [ -f state.toml.enc ]; then
            echo "Decrypting previous state..."
            openssl enc -d -aes-256-ctr \
              -pass env:ARTIFACT_PASSPHRASE \
              -in state.toml.enc \
              -out state.toml
          else
            echo "No previous state artifact."
          fi
      - name: Download latest release via GH CLI
        run: |
          gh auth setup-git
          gh release download \
            --repo ${{ github.repository }} \
            --pattern scraping-obs \
            --output ./scraping-obs
          chmod +x ./scraping-obs
      - name: Run scraper
        env:
          CALENDAR_URL: ${{ secrets.CALENDAR_URL }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: ./scraping-obs
      - name: Encrypt artifact
        env:
          ARTIFACT_PASSPHRASE: ${{ secrets.ARTIFACT_PASSPHRASE }}
        run: |
          openssl enc -aes-256-ctr \
            -salt \
            -pass env:ARTIFACT_PASSPHRASE \
            -in state.toml \
            -out state.toml.enc
      - name: Upload new state artifact
        uses: actions/upload-artifact@v4
        with:
          name: state
          path: state.toml.enc
